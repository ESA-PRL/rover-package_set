# When the source.yml contains the repository info, you should specify here how that package can be build.
# The packages that are commented out are already defined in the same way in the original rock package set.

#cmake_package "drivers/controldev"
#orogen_package "drivers/orogen/controldev"

#if !has_pcan_api? # defined in init.rb
#    Autoproj.manifest.add_exclusion "control/platform_driver", "Peak PCI Express Mini needed for platform_driver is not installed!. Install it manually: http://www.peak-system.com/fileadmin/media/linux/index.htm"
#end

if !has_pcan_api? # defined in init.rb
import_package 'drivers/pcan_pcie_mini' do |pkg|
    def pkg.prepare
        super
        isolate_errors do
            build
            progress_done
        end
        message "Importing MINI PCI Express package"
    end

    def pkg.build
        in_dir (srcdir) do
            run("build", Autobuild.tool(:make), 'NET=NO')
        end
        message "Built MINI PCI Express package"
    end
    
    def pkg.install
        message "Installing MINI PCI Express package..."

        in_dir (srcdir) do
            run('install', 'sudo make install ')

            # cannot do modprobe in docker
            if (not ENV.has_key?('RUNNING_IN_DOCKER')) or (ENV['RUNNING_IN_DOCKER'] == 'false')
                run('install', 'sudo modprobe pcan')
            end

        end

        message "Installed MINI PCI Express package"
    end
end
end


# Telemetry telecommand depends on this package
import_package 'drivers/activeMQ' do |pkg|

    def pkg.buildstamp; "autobuild-stamp" end

    def pkg.prepare
        if !has_activemq_api? # defined in init.rb
            message "Configuring activeMQ package..."
            in_dir(File.join(srcdir,"activemq-cpp")) do
                run("create_configure","./autogen.sh")
                run("prepare_configure","./configure", "--prefix=#{Autobuild.prefix}")
                message "Configured activeMQ package"
            end
            isolate_errors do
                build
                install
                progress_done
            end
        end
    end

    def pkg.build
        message "Building activeMQ package..."
        in_dir(File.join(srcdir,"activemq-cpp")) do
            run("build", Autobuild.tool(:make))
        end
        message "Built activeMQ package"
    end

    def pkg.install
        message "Installing activeMQ package..."
        super
        in_dir(File.join(srcdir,"activemq-cpp")) do
            run("install", "make install")
            run("bugfix", "sed -i -e 's/^Libs.private/\#Libs.private/g' activemq-cpp.pc")
            message "Commented out faulty line in activemq-cpp.pc"
        end
        FileUtils.install(File.join(srcdir, "activemq-cpp", "activemq-cpp.pc"), File.join(prefix, 'lib', "pkgconfig", "activemq-cpp.pc"))
        message "Installed activeMQ package"
    end
end
cmake_package "drivers/activeMQ"

cmake_package "drivers/platform_driver"
orogen_package "drivers/orogen/platform_driver"

cmake_package "drivers/temperature"
orogen_package "drivers/orogen/temperature"

cmake_package "drivers/telemetry_telecommand"
orogen_package "drivers/orogen/telemetry_telecommand"

cmake_package "drivers/dsp1760"
orogen_package "drivers/orogen/dsp1760"
#orogen_package "drivers/orogen/imu_stim300"

#orogen_package "drivers/orogen/velodyne_lidar"
#orogen_package "drivers/orogen/tofcamera_mesasr"

orogen_package "drivers/orogen/camera_trigger"
#orogen_package "drivers/orogen/camera_firewire"
orogen_package "drivers/orogen/camera_bb2"
orogen_package "drivers/orogen/camera_bb3"
#orogen_package "drivers/orogen/ptu_directedperception"

cmake_package "drivers/gnss_trimble"
orogen_package "drivers/orogen/gnss_trimble"
